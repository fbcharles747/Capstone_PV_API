@startuml "BaseService diagram"

package app.data_services{
    class BaseService <T> {
        - collection:MongoCollection
        + BaseService(collection_name:str,db:MongoClient)
        + create(model:T) -> Operation_status
        + read()->Dict[str,Any]
        + update()
        + delete()
    }

    class UserService{
        - __secret_key:str
        + UserService(secret_key:str)
        + sign_up(email:str,password:str)->OperationStatus
        + get_by_email(email:str)->Optional[User]
        + get_by_apikey(apikey:str)->Optional[User]
        + descrypt_apikey(apikey:str)->str
        + login(email:str,password:str)->Optional[User]
        + toggle_apikey(email:str,enable:bool)->bool
        + update_by_email(email:str,update_dict:dict)->bool
    }
}


package app.handler{

    abstract class BaseHandler{
        + tag:str
        + route:str
        + app:FastAPI
        + apikey_handler:APIKeyHandler
        + oauth_handler:JWTHandler

        + BaseHandler(tag:str,route:str,app:FastAPI)
        + {abstract} register_path() -> None
    }

    class UserHandler{
        - user_service:UserService
        + UserHandler(tag:str, route:str,app:FastAPI)
        + register_path()->None
    }


    class APIKeyHandler{
        - user_service:UserService
        + {static} api_key_header:APIKeyHeader 
        + APIKeyHandler(user_data_service:UserService)
        + apikey_from_request(apikey:str)->str
        + verify_api_key(api_key:str) -> bool
        + get_current_user(api_key:str)->Optional[User] <<throw>> HTTPException
    }

    class JWTHandler{
        - secret_key:str
        - algorithm:str
        - expire_time:int
        - user_data_service:UserService
        + {static} oauth2_scheme:OauthPasswordBearer
        + create_access_token(data:dict)->str
        + token_from_request(token:str)->str
        + login_for_access_token(email:str,password:str)->Optional[Token]
        + decode_token(token:str)->Optional[TokenData]
        + verify_token(access_token:str)->bool
        + get_current_user(access_token:str)->Optional[User] <<throw>> HTTPException

    }
}


BaseService <|-- UserService: extend
UserHandler --|> BaseHandler: extend
BaseHandler o-- APIKeyHandler:aggregate
BaseHandler o-- JWTHandler:aggregate
UserService --o UserHandler:aggregate
UserService --o APIKeyHandler: aggregate
UserService --o JWTHandler:aggregate


@enduml